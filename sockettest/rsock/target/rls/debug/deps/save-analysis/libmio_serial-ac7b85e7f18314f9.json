{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2","program":"/home/pythomancer/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","mio_serial","--edition=2018","/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=ac7b85e7f18314f9","-C","extra-filename=-ac7b85e7f18314f9","--out-dir","/home/pythomancer/Documents/ez-aquarii/sockettest/rsock/target/rls/debug/deps","-L","dependency=/home/pythomancer/Documents/ez-aquarii/sockettest/rsock/target/rls/debug/deps","--extern","log=/home/pythomancer/Documents/ez-aquarii/sockettest/rsock/target/rls/debug/deps/liblog-f0da8fbd76d2247e.rmeta","--extern","mio=/home/pythomancer/Documents/ez-aquarii/sockettest/rsock/target/rls/debug/deps/libmio-8a0d3a6b2a3eada2.rmeta","--extern","nix=/home/pythomancer/Documents/ez-aquarii/sockettest/rsock/target/rls/debug/deps/libnix-9383ecd9df8d2515.rmeta","--extern","serialport=/home/pythomancer/Documents/ez-aquarii/sockettest/rsock/target/rls/debug/deps/libserialport-d80fb5cd572bf171.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/pythomancer/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/pythomancer/Documents/ez-aquarii/sockettest/rsock/target/rls/debug/deps/libmio_serial-ac7b85e7f18314f9.rmeta"},"prelude":{"crate_id":{"name":"mio_serial","disambiguator":[15257408554316480550,0]},"crate_root":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src","external_crates":[{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17410308932696108380,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14414087034259949263,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13372101680896079740,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5118101865554607907,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8025854276978217217,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4385070015268585674,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9992538824178466914,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15270312766295648766,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[18385953104680678603,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9852578511365041000,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[2269743475717416395,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17706006846336192414,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[6383024135923770218,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[10215543262378548890,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[4195348899700366916,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[10100673089080813811,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[341892175500051738,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[141027009196343679,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[5788120405916140848,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":20,"id":{"name":"serialport","disambiguator":[14976693076343597500,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":21,"id":{"name":"cfg_if","disambiguator":[2189248502941426736,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":22,"id":{"name":"nix","disambiguator":[11414392376107494547,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":23,"id":{"name":"libc","disambiguator":[5170842456214530381,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":24,"id":{"name":"bitflags","disambiguator":[9566197753691594951,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":25,"id":{"name":"mio","disambiguator":[16512633421269482169,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":26,"id":{"name":"log","disambiguator":[7872699690716267234,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":27,"id":{"name":"value_bag","disambiguator":[11661376207768581083,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":28,"id":{"name":"nix","disambiguator":[6534545881288427547,0]}},{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","num":29,"id":{"name":"memoffset","disambiguator":[4606845102874783813,0]}}],"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":0,"byte_end":31211,"line_start":1,"line_end":900,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":20,"index":697},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":459,"byte_end":470,"line_start":16,"line_end":16,"column_start":5,"column_end":16},"alias_span":null,"name":"ClearBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":625},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":476,"byte_end":484,"line_start":17,"line_end":17,"column_start":5,"column_end":13},"alias_span":null,"name":"DataBits","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":618},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":505,"byte_end":510,"line_start":19,"line_end":19,"column_start":5,"column_end":10},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":596},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":516,"byte_end":525,"line_start":20,"line_end":20,"column_start":5,"column_end":14},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":679},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":531,"byte_end":542,"line_start":21,"line_end":21,"column_start":5,"column_end":16},"alias_span":null,"name":"FlowControl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":645},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":548,"byte_end":554,"line_start":22,"line_end":22,"column_start":5,"column_end":11},"alias_span":null,"name":"Parity","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":350},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":573,"byte_end":579,"line_start":24,"line_end":24,"column_start":5,"column_end":11},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":377},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":599,"byte_end":609,"line_start":26,"line_end":26,"column_start":5,"column_end":15},"alias_span":null,"name":"SerialPort","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":715},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":615,"byte_end":632,"line_start":27,"line_end":27,"column_start":5,"column_end":22},"alias_span":null,"name":"SerialPortBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":772},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":638,"byte_end":652,"line_start":28,"line_end":28,"column_start":5,"column_end":19},"alias_span":null,"name":"SerialPortInfo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":751},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":658,"byte_end":672,"line_start":29,"line_end":29,"column_start":5,"column_end":19},"alias_span":null,"name":"SerialPortType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":663},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":678,"byte_end":686,"line_start":30,"line_end":30,"column_start":5,"column_end":13},"alias_span":null,"name":"StopBits","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":734},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":692,"byte_end":703,"line_start":31,"line_end":31,"column_start":5,"column_end":16},"alias_span":null,"name":"UsbPortInfo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":433},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":777,"byte_end":792,"line_start":35,"line_end":35,"column_start":21,"column_end":36},"alias_span":null,"name":"available_ports","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":430},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":866,"byte_end":869,"line_start":38,"line_end":38,"column_start":21,"column_end":24},"alias_span":null,"name":"new","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":0,"byte_end":31211,"line_start":1,"line_end":900,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":93},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":101},{"krate":0,"index":127},{"krate":0,"index":140},{"krate":0,"index":181},{"krate":0,"index":196},{"krate":0,"index":200},{"krate":0,"index":202}],"decl_id":null,"docs":" # mio-serial - Serial port I/O for mio","sig":null,"attributes":[{"value":"/ # mio-serial - Serial port I/O for mio","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":0,"byte_end":42,"line_start":1,"line_end":1,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":43,"byte_end":46,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides a serial port implementation compatable with mio.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":47,"byte_end":120,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":121,"byte_end":124,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ **Windows support is present but largely untested by the author**","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":125,"byte_end":194,"line_start":5,"line_end":5,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":195,"byte_end":198,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ## Links","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":199,"byte_end":211,"line_start":7,"line_end":7,"column_start":1,"column_end":13}},{"value":"/   - repo:  <https://github.com/berkowski/mio-serial>","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":212,"byte_end":268,"line_start":8,"line_end":8,"column_start":1,"column_end":57}},{"value":"/   - docs:  <https://docs.rs/mio-serial>","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":269,"byte_end":312,"line_start":9,"line_end":9,"column_start":1,"column_end":44}},{"value":"deny(missing_docs)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":313,"byte_end":335,"line_start":10,"line_end":10,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":336,"byte_end":362,"line_start":11,"line_end":11,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":204},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":2229,"byte_end":2241,"line_start":79,"line_end":79,"column_start":12,"column_end":24},"name":"SerialStream","qualname":"::SerialStream","value":"SerialStream {  }","parent":null,"children":[{"krate":0,"index":205}],"decl_id":null,"docs":" SerialStream\n","sig":null,"attributes":[{"value":"/ SerialStream","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":2184,"byte_end":2200,"line_start":77,"line_end":77,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":2966,"byte_end":2970,"line_start":108,"line_end":108,"column_start":12,"column_end":16},"name":"open","qualname":"<SerialStream>::open","value":"fn open(&crate::SerialPortBuilder) -> crate::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Open a nonblocking serial port from the provided builder","sig":null,"attributes":[{"value":"/ Open a nonblocking serial port from the provided builder","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":2618,"byte_end":2678,"line_start":97,"line_end":97,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":2683,"byte_end":2686,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":2691,"byte_end":2705,"line_start":99,"line_end":99,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":2710,"byte_end":2713,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":2718,"byte_end":2731,"line_start":101,"line_end":101,"column_start":5,"column_end":18}},{"value":"/ use mio_serial::{SerialPortBuilder, SerialStream};","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":2736,"byte_end":2790,"line_start":102,"line_end":102,"column_start":5,"column_end":59}},{"value":"/ use std::path::Path;","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":2795,"byte_end":2819,"line_start":103,"line_end":103,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":2824,"byte_end":2827,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ let args = mio_serial::new(\"/dev/ttyUSB0\", 9600);","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":2832,"byte_end":2885,"line_start":105,"line_end":105,"column_start":5,"column_end":58}},{"value":"/ let serial = SerialStream::open(&args).unwrap();","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":2890,"byte_end":2942,"line_start":106,"line_end":106,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":2947,"byte_end":2954,"line_start":107,"line_end":107,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3681,"byte_end":3685,"line_start":131,"line_end":131,"column_start":12,"column_end":16},"name":"pair","qualname":"<SerialStream>::pair","value":"fn pair() -> crate::Result<(Self, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Create a pair of pseudo serial terminals","sig":null,"attributes":[{"value":"/ Create a pair of pseudo serial terminals","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3206,"byte_end":3250,"line_start":114,"line_end":114,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3255,"byte_end":3258,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ ## Returns","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3263,"byte_end":3277,"line_start":116,"line_end":116,"column_start":5,"column_end":19}},{"value":"/ Two connected `Serial` objects: `(master, slave)`","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3282,"byte_end":3335,"line_start":117,"line_end":117,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3340,"byte_end":3343,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3348,"byte_end":3361,"line_start":119,"line_end":119,"column_start":5,"column_end":18}},{"value":"/ Attempting any IO or parameter settings on the slave tty after the master","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3366,"byte_end":3443,"line_start":120,"line_end":120,"column_start":5,"column_end":82}},{"value":"/ tty is closed will return errors.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3448,"byte_end":3485,"line_start":121,"line_end":121,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3490,"byte_end":3493,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ## Examples","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3498,"byte_end":3513,"line_start":123,"line_end":123,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3518,"byte_end":3521,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3526,"byte_end":3533,"line_start":125,"line_end":125,"column_start":5,"column_end":12}},{"value":"/ use mio_serial::SerialStream;","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3538,"byte_end":3571,"line_start":126,"line_end":126,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3576,"byte_end":3579,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ let (master, slave) = SerialStream::pair().unwrap();","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3584,"byte_end":3640,"line_start":128,"line_end":128,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3645,"byte_end":3652,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"cfg(unix)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3657,"byte_end":3669,"line_start":130,"line_end":130,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":4281,"byte_end":4294,"line_start":151,"line_end":151,"column_start":12,"column_end":25},"name":"set_exclusive","qualname":"<SerialStream>::set_exclusive","value":"fn set_exclusive(&mut Self, bool) -> crate::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the exclusivity of the port","sig":null,"attributes":[{"value":"/ Sets the exclusivity of the port","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3917,"byte_end":3953,"line_start":140,"line_end":140,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3958,"byte_end":3961,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ If a port is exclusive, then trying to open the same device path again","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":3966,"byte_end":4040,"line_start":142,"line_end":142,"column_start":5,"column_end":79}},{"value":"/ will fail.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":4045,"byte_end":4059,"line_start":143,"line_end":143,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":4064,"byte_end":4067,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ See the man pages for the tiocexcl and tiocnxcl ioctl's for more details.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":4072,"byte_end":4149,"line_start":145,"line_end":145,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":4154,"byte_end":4157,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":4162,"byte_end":4175,"line_start":147,"line_end":147,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":4180,"byte_end":4183,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ * `Io` for any error while setting exclusivity for the port.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":4188,"byte_end":4252,"line_start":149,"line_end":149,"column_start":5,"column_end":69}},{"value":"cfg(unix)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":4257,"byte_end":4269,"line_start":150,"line_end":150,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":4590,"byte_end":4599,"line_start":160,"line_end":160,"column_start":12,"column_end":21},"name":"exclusive","qualname":"<SerialStream>::exclusive","value":"fn exclusive(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the exclusivity of the port","sig":null,"attributes":[{"value":"/ Returns the exclusivity of the port","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":4416,"byte_end":4455,"line_start":155,"line_end":155,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":4460,"byte_end":4463,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ If a port is exclusive, then trying to open the same device path again","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":4468,"byte_end":4542,"line_start":157,"line_end":157,"column_start":5,"column_end":79}},{"value":"/ will fail.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":4547,"byte_end":4561,"line_start":158,"line_end":158,"column_start":5,"column_end":19}},{"value":"cfg(unix)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":4566,"byte_end":4578,"line_start":159,"line_end":159,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":7975,"byte_end":7979,"line_start":237,"line_end":237,"column_start":8,"column_end":12},"name":"name","qualname":"<SerialStream as serialport::SerialPort>::name","value":"fn name(&Self) -> Option<String>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":378},"docs":" Return the name associated with the serial port, if known.\n","sig":null,"attributes":[{"value":"/ Return the name associated with the serial port, if known.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":7883,"byte_end":7945,"line_start":235,"line_end":235,"column_start":5,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":7950,"byte_end":7967,"line_start":236,"line_end":236,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":8369,"byte_end":8378,"line_start":247,"line_end":247,"column_start":8,"column_end":17},"name":"baud_rate","qualname":"<SerialStream as serialport::SerialPort>::baud_rate","value":"fn baud_rate(&Self) -> crate::Result<u32>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":379},"docs":" Returns the current baud rate.","sig":null,"attributes":[{"value":"/ Returns the current baud rate.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":8044,"byte_end":8078,"line_start":241,"line_end":241,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":8083,"byte_end":8086,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ This function returns `None` if the baud rate could not be determined. This may occur if","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":8091,"byte_end":8183,"line_start":243,"line_end":243,"column_start":5,"column_end":97}},{"value":"/ the hardware is in an uninitialized state. Setting a baud rate with `set_baud_rate()`","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":8188,"byte_end":8277,"line_start":244,"line_end":244,"column_start":5,"column_end":94}},{"value":"/ should initialize the baud rate to a supported value.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":8282,"byte_end":8339,"line_start":245,"line_end":245,"column_start":5,"column_end":62}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":8344,"byte_end":8361,"line_start":246,"line_end":246,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":8834,"byte_end":8843,"line_start":258,"line_end":258,"column_start":8,"column_end":17},"name":"data_bits","qualname":"<SerialStream as serialport::SerialPort>::data_bits","value":"fn data_bits(&Self) -> crate::Result<crate::DataBits>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":380},"docs":" Returns the character size.","sig":null,"attributes":[{"value":"/ Returns the character size.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":8452,"byte_end":8483,"line_start":251,"line_end":251,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":8488,"byte_end":8491,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ This function returns `None` if the character size could not be determined. This may occur","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":8496,"byte_end":8590,"line_start":253,"line_end":253,"column_start":5,"column_end":99}},{"value":"/ if the hardware is in an uninitialized state or is using a non-standard character size.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":8595,"byte_end":8686,"line_start":254,"line_end":254,"column_start":5,"column_end":96}},{"value":"/ Setting a baud rate with `set_char_size()` should initialize the character size to a","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":8691,"byte_end":8779,"line_start":255,"line_end":255,"column_start":5,"column_end":93}},{"value":"/ supported value.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":8784,"byte_end":8804,"line_start":256,"line_end":256,"column_start":5,"column_end":25}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":8809,"byte_end":8826,"line_start":257,"line_end":257,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":9334,"byte_end":9346,"line_start":269,"line_end":269,"column_start":8,"column_end":20},"name":"flow_control","qualname":"<SerialStream as serialport::SerialPort>::flow_control","value":"fn flow_control(&Self) -> crate::Result<crate::FlowControl>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":381},"docs":" Returns the flow control mode.","sig":null,"attributes":[{"value":"/ Returns the flow control mode.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":8929,"byte_end":8963,"line_start":262,"line_end":262,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":8968,"byte_end":8971,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ This function returns `None` if the flow control mode could not be determined. This may","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":8976,"byte_end":9067,"line_start":264,"line_end":264,"column_start":5,"column_end":96}},{"value":"/ occur if the hardware is in an uninitialized state or is using an unsupported flow control","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":9072,"byte_end":9166,"line_start":265,"line_end":265,"column_start":5,"column_end":99}},{"value":"/ mode. Setting a flow control mode with `set_flow_control()` should initialize the flow","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":9171,"byte_end":9261,"line_start":266,"line_end":266,"column_start":5,"column_end":95}},{"value":"/ control mode to a supported value.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":9266,"byte_end":9304,"line_start":267,"line_end":267,"column_start":5,"column_end":43}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":9309,"byte_end":9326,"line_start":268,"line_end":268,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":9808,"byte_end":9814,"line_start":279,"line_end":279,"column_start":8,"column_end":14},"name":"parity","qualname":"<SerialStream as serialport::SerialPort>::parity","value":"fn parity(&Self) -> crate::Result<crate::Parity>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":382},"docs":" Returns the parity-checking mode.","sig":null,"attributes":[{"value":"/ Returns the parity-checking mode.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":9438,"byte_end":9475,"line_start":273,"line_end":273,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":9480,"byte_end":9483,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ This function returns `None` if the parity mode could not be determined. This may occur if","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":9488,"byte_end":9582,"line_start":275,"line_end":275,"column_start":5,"column_end":99}},{"value":"/ the hardware is in an uninitialized state or is using a non-standard parity mode. Setting","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":9587,"byte_end":9680,"line_start":276,"line_end":276,"column_start":5,"column_end":98}},{"value":"/ a parity mode with `set_parity()` should initialize the parity mode to a supported value.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":9685,"byte_end":9778,"line_start":277,"line_end":277,"column_start":5,"column_end":98}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":9783,"byte_end":9800,"line_start":278,"line_end":278,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":10302,"byte_end":10311,"line_start":290,"line_end":290,"column_start":8,"column_end":17},"name":"stop_bits","qualname":"<SerialStream as serialport::SerialPort>::stop_bits","value":"fn stop_bits(&Self) -> crate::Result<crate::StopBits>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":383},"docs":" Returns the number of stop bits.","sig":null,"attributes":[{"value":"/ Returns the number of stop bits.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":9895,"byte_end":9931,"line_start":283,"line_end":283,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":9936,"byte_end":9939,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ This function returns `None` if the number of stop bits could not be determined. This may","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":9944,"byte_end":10037,"line_start":285,"line_end":285,"column_start":5,"column_end":98}},{"value":"/ occur if the hardware is in an uninitialized state or is using an unsupported stop bit","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":10042,"byte_end":10132,"line_start":286,"line_end":286,"column_start":5,"column_end":95}},{"value":"/ configuration. Setting the number of stop bits with `set_stop-bits()` should initialize the","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":10137,"byte_end":10232,"line_start":287,"line_end":287,"column_start":5,"column_end":100}},{"value":"/ stop bits to a supported value.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":10237,"byte_end":10272,"line_start":288,"line_end":288,"column_start":5,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":10277,"byte_end":10294,"line_start":289,"line_end":289,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":10565,"byte_end":10572,"line_start":297,"line_end":297,"column_start":8,"column_end":15},"name":"timeout","qualname":"<SerialStream as serialport::SerialPort>::timeout","value":"fn timeout(&Self) -> Duration","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":384},"docs":" Returns the current timeout. This parameter is const and equal to zero and implemented due\n to required for trait completeness.\n","sig":null,"attributes":[{"value":"/ Returns the current timeout. This parameter is const and equal to zero and implemented due","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":10397,"byte_end":10491,"line_start":294,"line_end":294,"column_start":5,"column_end":99}},{"value":"/ to required for trait completeness.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":10496,"byte_end":10535,"line_start":295,"line_end":295,"column_start":5,"column_end":44}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":10540,"byte_end":10557,"line_start":296,"line_end":296,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":10969,"byte_end":10982,"line_start":309,"line_end":309,"column_start":8,"column_end":21},"name":"set_baud_rate","qualname":"<SerialStream as serialport::SerialPort>::set_baud_rate","value":"fn set_baud_rate(&mut Self, u32) -> crate::Result<()>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":385},"docs":" Sets the baud rate.","sig":null,"attributes":[{"value":"/ Sets the baud rate.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":10636,"byte_end":10659,"line_start":301,"line_end":301,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":10664,"byte_end":10667,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":10672,"byte_end":10685,"line_start":303,"line_end":303,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":10690,"byte_end":10693,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ If the implementation does not support the requested baud rate, this function may return an","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":10698,"byte_end":10793,"line_start":305,"line_end":305,"column_start":5,"column_end":100}},{"value":"/ `InvalidInput` error. Even if the baud rate is accepted by `set_baud_rate()`, it may not be","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":10798,"byte_end":10893,"line_start":306,"line_end":306,"column_start":5,"column_end":100}},{"value":"/ supported by the underlying hardware.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":10898,"byte_end":10939,"line_start":307,"line_end":307,"column_start":5,"column_end":46}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":10944,"byte_end":10961,"line_start":308,"line_end":308,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":11146,"byte_end":11159,"line_start":315,"line_end":315,"column_start":8,"column_end":21},"name":"set_data_bits","qualname":"<SerialStream as serialport::SerialPort>::set_data_bits","value":"fn set_data_bits(&mut Self, crate::DataBits) -> crate::Result<()>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":386},"docs":" Sets the character size.\n","sig":null,"attributes":[{"value":"/ Sets the character size.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":11088,"byte_end":11116,"line_start":313,"line_end":313,"column_start":5,"column_end":33}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":11121,"byte_end":11138,"line_start":314,"line_end":314,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":11368,"byte_end":11384,"line_start":323,"line_end":323,"column_start":8,"column_end":24},"name":"set_flow_control","qualname":"<SerialStream as serialport::SerialPort>::set_flow_control","value":"fn set_flow_control(&mut Self, crate::FlowControl) -> crate::Result<()>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":387},"docs":" Sets the flow control mode.\n","sig":null,"attributes":[{"value":"/ Sets the flow control mode.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":11307,"byte_end":11338,"line_start":321,"line_end":321,"column_start":5,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":11343,"byte_end":11360,"line_start":322,"line_end":322,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":11578,"byte_end":11588,"line_start":329,"line_end":329,"column_start":8,"column_end":18},"name":"set_parity","qualname":"<SerialStream as serialport::SerialPort>::set_parity","value":"fn set_parity(&mut Self, crate::Parity) -> crate::Result<()>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":388},"docs":" Sets the parity-checking mode.\n","sig":null,"attributes":[{"value":"/ Sets the parity-checking mode.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":11514,"byte_end":11548,"line_start":327,"line_end":327,"column_start":5,"column_end":39}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":11553,"byte_end":11570,"line_start":328,"line_end":328,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":11758,"byte_end":11771,"line_start":335,"line_end":335,"column_start":8,"column_end":21},"name":"set_stop_bits","qualname":"<SerialStream as serialport::SerialPort>::set_stop_bits","value":"fn set_stop_bits(&mut Self, crate::StopBits) -> crate::Result<()>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":389},"docs":" Sets the number of stop bits.\n","sig":null,"attributes":[{"value":"/ Sets the number of stop bits.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":11695,"byte_end":11728,"line_start":333,"line_end":333,"column_start":5,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":11733,"byte_end":11750,"line_start":334,"line_end":334,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12037,"byte_end":12048,"line_start":342,"line_end":342,"column_start":8,"column_end":19},"name":"set_timeout","qualname":"<SerialStream as serialport::SerialPort>::set_timeout","value":"fn set_timeout(&mut Self, Duration) -> crate::Result<()>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":390},"docs":" Sets the timeout for future I/O operations. This parameter is ignored but\n required for trait completeness.\n","sig":null,"attributes":[{"value":"/ Sets the timeout for future I/O operations. This parameter is ignored but","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":11889,"byte_end":11966,"line_start":339,"line_end":339,"column_start":5,"column_end":82}},{"value":"/ required for trait completeness.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":11971,"byte_end":12007,"line_start":340,"line_end":340,"column_start":5,"column_end":41}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12012,"byte_end":12029,"line_start":341,"line_end":341,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12598,"byte_end":12619,"line_start":358,"line_end":358,"column_start":8,"column_end":29},"name":"write_request_to_send","qualname":"<SerialStream as serialport::SerialPort>::write_request_to_send","value":"fn write_request_to_send(&mut Self, bool) -> crate::Result<()>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":391},"docs":" Sets the state of the RTS (Request To Send) control signal.","sig":null,"attributes":[{"value":"/ Sets the state of the RTS (Request To Send) control signal.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12122,"byte_end":12185,"line_start":346,"line_end":346,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12190,"byte_end":12193,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ Setting a value of `true` asserts the RTS control signal. `false` clears the signal.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12198,"byte_end":12286,"line_start":348,"line_end":348,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12291,"byte_end":12294,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12299,"byte_end":12312,"line_start":350,"line_end":350,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12317,"byte_end":12320,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the RTS control signal could not be set to the desired","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12325,"byte_end":12417,"line_start":352,"line_end":352,"column_start":5,"column_end":97}},{"value":"/ state on the underlying hardware:","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12422,"byte_end":12459,"line_start":353,"line_end":353,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12464,"byte_end":12467,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12472,"byte_end":12520,"line_start":355,"line_end":355,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12525,"byte_end":12568,"line_start":356,"line_end":356,"column_start":5,"column_end":48}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12573,"byte_end":12590,"line_start":357,"line_end":357,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13180,"byte_end":13205,"line_start":374,"line_end":374,"column_start":8,"column_end":33},"name":"write_data_terminal_ready","qualname":"<SerialStream as serialport::SerialPort>::write_data_terminal_ready","value":"fn write_data_terminal_ready(&mut Self, bool) -> crate::Result<()>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":392},"docs":" Writes to the Data Terminal Ready pin","sig":null,"attributes":[{"value":"/ Writes to the Data Terminal Ready pin","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12726,"byte_end":12767,"line_start":362,"line_end":362,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12772,"byte_end":12775,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ Setting a value of `true` asserts the DTR control signal. `false` clears the signal.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12780,"byte_end":12868,"line_start":364,"line_end":364,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12873,"byte_end":12876,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12881,"byte_end":12894,"line_start":366,"line_end":366,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12899,"byte_end":12902,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the DTR control signal could not be set to the desired","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":12907,"byte_end":12999,"line_start":368,"line_end":368,"column_start":5,"column_end":97}},{"value":"/ state on the underlying hardware:","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13004,"byte_end":13041,"line_start":369,"line_end":369,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13046,"byte_end":13049,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13054,"byte_end":13102,"line_start":371,"line_end":371,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13107,"byte_end":13150,"line_start":372,"line_end":372,"column_start":5,"column_end":48}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13155,"byte_end":13172,"line_start":373,"line_end":373,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13851,"byte_end":13869,"line_start":392,"line_end":392,"column_start":8,"column_end":26},"name":"read_clear_to_send","qualname":"<SerialStream as serialport::SerialPort>::read_clear_to_send","value":"fn read_clear_to_send(&mut Self) -> crate::Result<bool>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":393},"docs":" Reads the state of the CTS (Clear To Send) control signal.","sig":null,"attributes":[{"value":"/ Reads the state of the CTS (Clear To Send) control signal.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13375,"byte_end":13437,"line_start":380,"line_end":380,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13442,"byte_end":13445,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ This function returns a boolean that indicates whether the CTS control signal is asserted.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13450,"byte_end":13544,"line_start":382,"line_end":382,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13549,"byte_end":13552,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13557,"byte_end":13570,"line_start":384,"line_end":384,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13575,"byte_end":13578,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the state of the CTS control signal could not be read","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13583,"byte_end":13674,"line_start":386,"line_end":386,"column_start":5,"column_end":96}},{"value":"/ from the underlying hardware:","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13679,"byte_end":13712,"line_start":387,"line_end":387,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13717,"byte_end":13720,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13725,"byte_end":13773,"line_start":389,"line_end":389,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13778,"byte_end":13821,"line_start":390,"line_end":390,"column_start":5,"column_end":48}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13826,"byte_end":13843,"line_start":391,"line_end":391,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14428,"byte_end":14447,"line_start":408,"line_end":408,"column_start":8,"column_end":27},"name":"read_data_set_ready","qualname":"<SerialStream as serialport::SerialPort>::read_data_set_ready","value":"fn read_data_set_ready(&mut Self) -> crate::Result<bool>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":394},"docs":" Reads the state of the Data Set Ready control signal.","sig":null,"attributes":[{"value":"/ Reads the state of the Data Set Ready control signal.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":13957,"byte_end":14014,"line_start":396,"line_end":396,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14019,"byte_end":14022,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ This function returns a boolean that indicates whether the DSR control signal is asserted.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14027,"byte_end":14121,"line_start":398,"line_end":398,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14126,"byte_end":14129,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14134,"byte_end":14147,"line_start":400,"line_end":400,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14152,"byte_end":14155,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the state of the DSR control signal could not be read","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14160,"byte_end":14251,"line_start":402,"line_end":402,"column_start":5,"column_end":96}},{"value":"/ from the underlying hardware:","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14256,"byte_end":14289,"line_start":403,"line_end":403,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14294,"byte_end":14297,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14302,"byte_end":14350,"line_start":405,"line_end":405,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14355,"byte_end":14398,"line_start":406,"line_end":406,"column_start":5,"column_end":48}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14403,"byte_end":14420,"line_start":407,"line_end":407,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15051,"byte_end":15070,"line_start":426,"line_end":426,"column_start":8,"column_end":27},"name":"read_ring_indicator","qualname":"<SerialStream as serialport::SerialPort>::read_ring_indicator","value":"fn read_ring_indicator(&mut Self) -> crate::Result<bool>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":395},"docs":" Reads the state of the Ring Indicator control signal.","sig":null,"attributes":[{"value":"/ Reads the state of the Ring Indicator control signal.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14582,"byte_end":14639,"line_start":414,"line_end":414,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14644,"byte_end":14647,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ This function returns a boolean that indicates whether the RI control signal is asserted.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14652,"byte_end":14745,"line_start":416,"line_end":416,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14750,"byte_end":14753,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14758,"byte_end":14771,"line_start":418,"line_end":418,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14776,"byte_end":14779,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the state of the RI control signal could not be read from","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14784,"byte_end":14879,"line_start":420,"line_end":420,"column_start":5,"column_end":100}},{"value":"/ the underlying hardware:","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14884,"byte_end":14912,"line_start":421,"line_end":421,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14917,"byte_end":14920,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14925,"byte_end":14973,"line_start":423,"line_end":423,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":14978,"byte_end":15021,"line_start":424,"line_end":424,"column_start":5,"column_end":48}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15026,"byte_end":15043,"line_start":425,"line_end":425,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15628,"byte_end":15647,"line_start":442,"line_end":442,"column_start":8,"column_end":27},"name":"read_carrier_detect","qualname":"<SerialStream as serialport::SerialPort>::read_carrier_detect","value":"fn read_carrier_detect(&mut Self) -> crate::Result<bool>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":396},"docs":" Reads the state of the Carrier Detect control signal.","sig":null,"attributes":[{"value":"/ Reads the state of the Carrier Detect control signal.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15159,"byte_end":15216,"line_start":430,"line_end":430,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15221,"byte_end":15224,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ This function returns a boolean that indicates whether the CD control signal is asserted.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15229,"byte_end":15322,"line_start":432,"line_end":432,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15327,"byte_end":15330,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15335,"byte_end":15348,"line_start":434,"line_end":434,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15353,"byte_end":15356,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the state of the CD control signal could not be read from","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15361,"byte_end":15456,"line_start":436,"line_end":436,"column_start":5,"column_end":100}},{"value":"/ the underlying hardware:","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15461,"byte_end":15489,"line_start":437,"line_end":437,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15494,"byte_end":15497,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15502,"byte_end":15550,"line_start":439,"line_end":439,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15555,"byte_end":15598,"line_start":440,"line_end":440,"column_start":5,"column_end":48}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15603,"byte_end":15620,"line_start":441,"line_end":441,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16035,"byte_end":16048,"line_start":455,"line_end":455,"column_start":8,"column_end":21},"name":"bytes_to_read","qualname":"<SerialStream as serialport::SerialPort>::bytes_to_read","value":"fn bytes_to_read(&Self) -> crate::Result<u32>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":397},"docs":" Gets the number of bytes available to be read from the input buffer.","sig":null,"attributes":[{"value":"/ Gets the number of bytes available to be read from the input buffer.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15736,"byte_end":15808,"line_start":446,"line_end":446,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15813,"byte_end":15816,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15821,"byte_end":15833,"line_start":448,"line_end":448,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15838,"byte_end":15841,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ This function may return the following errors:","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15846,"byte_end":15896,"line_start":450,"line_end":450,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15901,"byte_end":15904,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15909,"byte_end":15957,"line_start":452,"line_end":452,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":15962,"byte_end":16005,"line_start":453,"line_end":453,"column_start":5,"column_end":48}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16010,"byte_end":16027,"line_start":454,"line_end":454,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16433,"byte_end":16447,"line_start":468,"line_end":468,"column_start":8,"column_end":22},"name":"bytes_to_write","qualname":"<SerialStream as serialport::SerialPort>::bytes_to_write","value":"fn bytes_to_write(&Self) -> crate::Result<u32>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":398},"docs":" Get the number of bytes written to the output buffer, awaiting transmission.","sig":null,"attributes":[{"value":"/ Get the number of bytes written to the output buffer, awaiting transmission.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16126,"byte_end":16206,"line_start":459,"line_end":459,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16211,"byte_end":16214,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16219,"byte_end":16231,"line_start":461,"line_end":461,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16236,"byte_end":16239,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ This function may return the following errors:","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16244,"byte_end":16294,"line_start":463,"line_end":463,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16299,"byte_end":16302,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16307,"byte_end":16355,"line_start":465,"line_end":465,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16360,"byte_end":16403,"line_start":466,"line_end":466,"column_start":5,"column_end":48}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16408,"byte_end":16425,"line_start":467,"line_end":467,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16835,"byte_end":16840,"line_start":481,"line_end":481,"column_start":8,"column_end":13},"name":"clear","qualname":"<SerialStream as serialport::SerialPort>::clear","value":"fn clear(&Self, crate::ClearBuffer) -> crate::Result<()>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":399},"docs":" Discards all bytes from the serial driver's input buffer and/or output buffer.","sig":null,"attributes":[{"value":"/ Discards all bytes from the serial driver's input buffer and/or output buffer.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16526,"byte_end":16608,"line_start":472,"line_end":472,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16613,"byte_end":16616,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16621,"byte_end":16633,"line_start":474,"line_end":474,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16638,"byte_end":16641,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ This function may return the following errors:","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16646,"byte_end":16696,"line_start":476,"line_end":476,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16701,"byte_end":16704,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16709,"byte_end":16757,"line_start":478,"line_end":478,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16762,"byte_end":16805,"line_start":479,"line_end":479,"column_start":5,"column_end":48}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":16810,"byte_end":16827,"line_start":480,"line_end":480,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":18693,"byte_end":18702,"line_start":516,"line_end":516,"column_start":8,"column_end":17},"name":"try_clone","qualname":"<SerialStream as serialport::SerialPort>::try_clone","value":"fn try_clone(&Self) -> crate::Result<Box<dyn crate::SerialPort>>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":400},"docs":" Cloning is not supported for SerialStream objects","sig":null,"attributes":[{"value":"/ Cloning is not supported for SerialStream objects","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":17825,"byte_end":17878,"line_start":503,"line_end":503,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":17883,"byte_end":17886,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ This logic has never really completely worked.  Cloned file descriptors in asynchronous","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":17891,"byte_end":17982,"line_start":505,"line_end":505,"column_start":5,"column_end":96}},{"value":"/ code is a semantic minefield.  Are you cloning the file descriptor?  Are you cloning the","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":17987,"byte_end":18079,"line_start":506,"line_end":506,"column_start":5,"column_end":97}},{"value":"/ event flags on the file descriptor?  Both?  It's a bit of a mess even within one OS,","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":18084,"byte_end":18172,"line_start":507,"line_end":507,"column_start":5,"column_end":93}},{"value":"/ let alone across multiple OS's","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":18177,"byte_end":18211,"line_start":508,"line_end":508,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":18216,"byte_end":18219,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ Maybe it can be done with more work, but until a clear use-case is required (or mio/tokio","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":18224,"byte_end":18317,"line_start":510,"line_end":510,"column_start":5,"column_end":98}},{"value":"/ gets an equivalent of the unix `AsyncFd` for async file handles, see","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":18322,"byte_end":18394,"line_start":511,"line_end":511,"column_start":5,"column_end":77}},{"value":"/ https://github.com/tokio-rs/tokio/issues/3781 and","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":18399,"byte_end":18452,"line_start":512,"line_end":512,"column_start":5,"column_end":58}},{"value":"/ https://github.com/tokio-rs/tokio/pull/3760#issuecomment-839854617) I would rather not","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":18457,"byte_end":18547,"line_start":513,"line_end":513,"column_start":5,"column_end":95}},{"value":"/ have any code available over a kind-of-works-maybe impl.  So I'll leave this code here","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":18552,"byte_end":18642,"line_start":514,"line_end":514,"column_start":5,"column_end":95}},{"value":"/ for now but hard-code it disabled.","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":18647,"byte_end":18685,"line_start":515,"line_end":515,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":18980,"byte_end":18989,"line_start":525,"line_end":525,"column_start":8,"column_end":17},"name":"set_break","qualname":"<SerialStream as serialport::SerialPort>::set_break","value":"fn set_break(&Self) -> crate::Result<()>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":401},"docs":" Start transmitting a break\n","sig":null,"attributes":[{"value":"/ Start transmitting a break","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":18920,"byte_end":18950,"line_start":523,"line_end":523,"column_start":5,"column_end":35}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":18955,"byte_end":18972,"line_start":524,"line_end":524,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":19121,"byte_end":19132,"line_start":531,"line_end":531,"column_start":8,"column_end":19},"name":"clear_break","qualname":"<SerialStream as serialport::SerialPort>::clear_break","value":"fn clear_break(&Self) -> crate::Result<()>","parent":{"krate":20,"index":377},"children":[],"decl_id":{"krate":20,"index":402},"docs":" Stop transmitting a break\n","sig":null,"attributes":[{"value":"/ Stop transmitting a break","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":19062,"byte_end":19091,"line_start":529,"line_end":529,"column_start":5,"column_end":34}},{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":19096,"byte_end":19113,"line_start":530,"line_end":530,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":19318,"byte_end":19326,"line_start":539,"line_end":539,"column_start":8,"column_end":16},"name":"try_from","qualname":"<SerialStream as std::convert::TryFrom>::try_from","value":"fn try_from(NativeBlockingSerialPort)\n-> std::result::Result<Self, Self::Error>","parent":{"krate":2,"index":3090},"children":[],"decl_id":{"krate":2,"index":3093},"docs":"","sig":null,"attributes":[{"value":"cfg(unix)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":19298,"byte_end":19310,"line_start":538,"line_end":538,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":23883,"byte_end":23887,"line_start":657,"line_end":657,"column_start":12,"column_end":16},"name":"read","qualname":"<SerialStream as std::io::Read>::read","value":"fn read(&mut Self, &mut [u8]) -> StdIoResult<usize>","parent":{"krate":1,"index":4527},"children":[],"decl_id":{"krate":1,"index":4528},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":24370,"byte_end":24375,"line_start":672,"line_end":672,"column_start":12,"column_end":17},"name":"write","qualname":"<SerialStream as std::io::Write>::write","value":"fn write(&mut Self, &[u8]) -> StdIoResult<usize>","parent":{"krate":1,"index":4584},"children":[],"decl_id":{"krate":1,"index":4585},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":24817,"byte_end":24822,"line_start":685,"line_end":685,"column_start":12,"column_end":17},"name":"flush","qualname":"<SerialStream as std::io::Write>::flush","value":"fn flush(&mut Self) -> StdIoResult<()>","parent":{"krate":1,"index":4584},"children":[],"decl_id":{"krate":1,"index":4589},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":25021,"byte_end":25025,"line_start":691,"line_end":691,"column_start":12,"column_end":16},"name":"read","qualname":"<&'a SerialStream as std::io::Read>::read","value":"fn read(&mut Self, &mut [u8]) -> StdIoResult<usize>","parent":{"krate":1,"index":4527},"children":[],"decl_id":{"krate":1,"index":4528},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":25516,"byte_end":25521,"line_start":706,"line_end":706,"column_start":12,"column_end":17},"name":"write","qualname":"<&'a SerialStream as std::io::Write>::write","value":"fn write(&mut Self, &[u8]) -> StdIoResult<usize>","parent":{"krate":1,"index":4584},"children":[],"decl_id":{"krate":1,"index":4585},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":25963,"byte_end":25968,"line_start":719,"line_end":719,"column_start":12,"column_end":17},"name":"flush","qualname":"<&'a SerialStream as std::io::Write>::flush","value":"fn flush(&mut Self) -> StdIoResult<()>","parent":{"krate":1,"index":4584},"children":[],"decl_id":{"krate":1,"index":4589},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":27969,"byte_end":27978,"line_start":784,"line_end":784,"column_start":12,"column_end":21},"name":"as_raw_fd","qualname":"<SerialStream as std::os::unix::io::AsRawFd>::as_raw_fd","value":"fn as_raw_fd(&Self) -> RawFd","parent":{"krate":1,"index":6753},"children":[],"decl_id":{"krate":1,"index":6754},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":28098,"byte_end":28109,"line_start":790,"line_end":790,"column_start":12,"column_end":23},"name":"into_raw_fd","qualname":"<SerialStream as std::os::unix::io::IntoRawFd>::into_raw_fd","value":"fn into_raw_fd(Self) -> RawFd","parent":{"krate":1,"index":6757},"children":[],"decl_id":{"krate":1,"index":6758},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":28237,"byte_end":28248,"line_start":796,"line_end":796,"column_start":19,"column_end":30},"name":"from_raw_fd","qualname":"<SerialStream as std::os::unix::io::FromRawFd>::from_raw_fd","value":"unsafe fn from_raw_fd(RawFd) -> Self","parent":{"krate":1,"index":6755},"children":[],"decl_id":{"krate":1,"index":6756},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":29389,"byte_end":29397,"line_start":833,"line_end":833,"column_start":8,"column_end":16},"name":"register","qualname":"<SerialStream as mio::event::Source>::register","value":"fn register(&mut Self, &Registry, Token, Interest) -> StdIoResult<()>","parent":{"krate":25,"index":204},"children":[],"decl_id":{"krate":25,"index":205},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":29364,"byte_end":29381,"line_start":832,"line_end":832,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":29634,"byte_end":29644,"line_start":843,"line_end":843,"column_start":8,"column_end":18},"name":"reregister","qualname":"<SerialStream as mio::event::Source>::reregister","value":"fn reregister(&mut Self, &Registry, Token, Interest) -> StdIoResult<()>","parent":{"krate":25,"index":204},"children":[],"decl_id":{"krate":25,"index":206},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":29609,"byte_end":29626,"line_start":842,"line_end":842,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":29883,"byte_end":29893,"line_start":853,"line_end":853,"column_start":8,"column_end":18},"name":"deregister","qualname":"<SerialStream as mio::event::Source>::deregister","value":"fn deregister(&mut Self, &Registry) -> StdIoResult<()>","parent":{"krate":25,"index":204},"children":[],"decl_id":{"krate":25,"index":207},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":29858,"byte_end":29875,"line_start":852,"line_end":852,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":200},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":30815,"byte_end":30835,"line_start":890,"line_end":890,"column_start":11,"column_end":31},"name":"SerialPortBuilderExt","qualname":"::SerialPortBuilderExt","value":"SerialPortBuilderExt","parent":null,"children":[{"krate":0,"index":201}],"decl_id":null,"docs":" An extension trait for SerialPortBuilder","sig":null,"attributes":[{"value":"/ An extension trait for SerialPortBuilder","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":30589,"byte_end":30633,"line_start":883,"line_end":883,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":30634,"byte_end":30637,"line_start":884,"line_end":884,"column_start":1,"column_end":4}},{"value":"/ This trait adds an additional method to SerialPortBuilder:","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":30638,"byte_end":30700,"line_start":885,"line_end":885,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":30701,"byte_end":30704,"line_start":886,"line_end":886,"column_start":1,"column_end":4}},{"value":"/ - open_native_async","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":30705,"byte_end":30728,"line_start":887,"line_end":887,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":30729,"byte_end":30732,"line_start":888,"line_end":888,"column_start":1,"column_end":4}},{"value":"/ These methods mirror the `open_native` methods of SerialPortBuilder","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":30733,"byte_end":30804,"line_start":889,"line_end":889,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":30928,"byte_end":30945,"line_start":892,"line_end":892,"column_start":8,"column_end":25},"name":"open_native_async","qualname":"::SerialPortBuilderExt::open_native_async","value":"fn open_native_async(Self) -> Result<SerialStream>","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Open a platform-specific interface to the port with the specified settings\n","sig":null,"attributes":[{"value":"/ Open a platform-specific interface to the port with the specified settings","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":30842,"byte_end":30920,"line_start":891,"line_end":891,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":31120,"byte_end":31137,"line_start":897,"line_end":897,"column_start":8,"column_end":25},"name":"open_native_async","qualname":"<SerialPortBuilder as SerialPortBuilderExt>::open_native_async","value":"fn open_native_async(Self) -> Result<SerialStream>","parent":{"krate":0,"index":200},"children":[],"decl_id":{"krate":0,"index":201},"docs":" Open a platform-specific interface to the port with the specified settings\n","sig":null,"attributes":[{"value":"/ Open a platform-specific interface to the port with the specified settings","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":31034,"byte_end":31112,"line_start":896,"line_end":896,"column_start":5,"column_end":83}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":2599,"byte_end":2611,"line_start":96,"line_end":96,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":7864,"byte_end":7876,"line_start":234,"line_end":234,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":19248,"byte_end":19260,"line_start":536,"line_end":536,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":23857,"byte_end":23869,"line_start":656,"line_end":656,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":24344,"byte_end":24356,"line_start":671,"line_end":671,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":27943,"byte_end":27955,"line_start":783,"line_end":783,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":28072,"byte_end":28084,"line_start":789,"line_end":789,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":28204,"byte_end":28216,"line_start":795,"line_end":795,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":29345,"byte_end":29357,"line_start":831,"line_end":831,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":31010,"byte_end":31027,"line_start":895,"line_end":895,"column_start":31,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":2599,"byte_end":2611,"line_start":96,"line_end":96,"column_start":6,"column_end":18},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":204},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":7864,"byte_end":7876,"line_start":234,"line_end":234,"column_start":28,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":204},"to":{"krate":20,"index":377}},{"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":19248,"byte_end":19260,"line_start":536,"line_end":536,"column_start":44,"column_end":56},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":204},"to":{"krate":2,"index":3090}},{"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":23857,"byte_end":23869,"line_start":656,"line_end":656,"column_start":19,"column_end":31},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":204},"to":{"krate":1,"index":4527}},{"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":24344,"byte_end":24356,"line_start":671,"line_end":671,"column_start":20,"column_end":32},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":204},"to":{"krate":1,"index":4584}},{"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":27943,"byte_end":27955,"line_start":783,"line_end":783,"column_start":22,"column_end":34},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":204},"to":{"krate":1,"index":6753}},{"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":28072,"byte_end":28084,"line_start":789,"line_end":789,"column_start":24,"column_end":36},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":204},"to":{"krate":1,"index":6757}},{"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":28204,"byte_end":28216,"line_start":795,"line_end":795,"column_start":24,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":204},"to":{"krate":1,"index":6755}},{"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":29345,"byte_end":29357,"line_start":831,"line_end":831,"column_start":17,"column_end":29},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":204},"to":{"krate":25,"index":204}},{"span":{"file_name":"/home/pythomancer/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-serial-5.0.2/src/lib.rs","byte_start":31010,"byte_end":31027,"line_start":895,"line_end":895,"column_start":31,"column_end":48},"kind":{"Impl":{"id":9}},"from":{"krate":20,"index":715},"to":{"krate":0,"index":200}}]}